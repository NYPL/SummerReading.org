<?php
// $Id: sr_review.module

/**
 * @file
 * Media review related functions for the Summer Reading website
 */

// Review object definition
module_load_include('php', 'sr_review', 'Review');

/**
 * Implementation of hook_menu().
 */
function sr_review_menu() {
  $items['savereview/%'] = array(
    'title' => 'Save a media review',
    'page callback' => 'sr_review_savereview',
    'page arguments' => array(1),
    'access arguments' => array('create review content'),
    'type' => MENU_CALLBACK
  );
  $items['savelike/%'] = array(
    'title' => 'Save a review like',
    'page callback' => 'sr_review_savelike',
    'page arguments' => array(1),
    'access arguments' => array('create review content'),
    'type' => MENU_CALLBACK
  );
  $items['reviewbody/%'] = array(
    'title' => 'Load entire review body',
    'page callback' => 'sr_review_reviewbody',
    'page arguments' => array(1),
    'access arguments' => array('create review content'),
    'type' => MENU_CALLBACK
  );
  $items['reviews/%/%'] = array(
    'title' => 'Load list of reviews for a piece of media',
    'page callback' => 'sr_review_reviews',
    'page arguments' => array(1, 2),
    'access arguments' => array('create review content'),
    'type' => MENU_CALLBACK
  );
  $items['review/%/%'] = array(
    'title' => 'Load a single review',
    'page callback' => 'sr_review_review',
    'page arguments' => array(1, 2),
    'access arguments' => array('create review content'),
    'type' => MENU_CALLBACK
  );
  $items['review/reportremove/%'] = array(
    'title' => 'Load a single review',
    'page callback' => 'sr_review_report_remove',
    'page arguments' => array(2),
    'access arguments' => array('search content'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['adminreviews'] = array(
    'title' => 'Administer Reviews',
    'page callback' => 'sr_review_adminreviews',
    'access arguments' => array('edit any review content'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['report/%'] = array(
    'title' => 'report this review',
    'page callback' => 'sr_review_report',
    'page arguments' => array(1),
    'access arguments' => array('create review content'),
    'type' => MENU_CALLBACK
  );
  
  return $items;
}

/**
 * Implementation of hook_view().
 */
function sr_review_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'view':
   		global $user;
			// prevent summer readers from accessing raw nodes
  		if ($node->type == "review" || $node->type == "badge") {
				if (!sr_user_nodb_isAdmin($user)) {
					$node->content['body']['#value'] = "Access denied.";
				}
			}
			break;
  }
}

function sr_review_view($node, $teaser = FALSE, $page = FALSE) {
  //$node = node_prepare($node, $teaser);
  
}

/**
 * page to administer unpublished and reported reviews
 */
function sr_review_adminreviews($type) {
    if($type=='unpublish')
		$output .= t("Unpublished reviews which possibly contain forbidden content.");
	else
	    $output .= t("Reviews reported by users which possibly contain inappropriate language.
             		Click the title below to read the review. If the content is inappropriate, 
					edit or delete it from the Drupal edit page. If the review is okay, 
					remove it from this administrative list.");
	
	$output .= '<div id="admin-reviews" class="admin-table">' ;
    if($type=='unpublish')
	{
		$output .= '<div class="admin-reviews-heading admin-heading">' ;
		$output .= '<div class="admin-reviews-heading-col0 admin-table-heading-col">Title</div>' ;
		$output .= '<div class="admin-reviews-heading-col1 admin-table-heading-col">Author</div>' ;
    }
	else
	{
	    $output .= '<div class="admin-badges-heading-col0 admin-table-heading-col">Title</div>' ;
		$output .= '<div class="admin-badges-heading-col2 admin-table-heading-col">Author</div>' ;
		$output .= '<div class="admin-badges-heading-col4 admin-table-heading-col">Review Okay</div>' ;
	}
	$output .= "</div>";
	
	if($type=='unpublish')
		$reviews = Review::loadUnpublishedReviews();
	else
		$reviews = Review::loadReportedReviews();
	if ($reviews->count > 0) {
		
		// unpublished reviews exist
		$x = 0;
		
		while ($x < $reviews->count) {
			$review = $reviews->getObject($x);
			
			if (!$review) {
				break;
			}
			
			if ($x % 2 == 0) {
				$rowclass = "admin-table-row-even";
			}
			else {
				$rowclass = "admin-table-row-odd";
			}
			if($type=='unpublish')
	        {
				$output .= '<div class="admin-reviews-item admin-table-row">';
				$output .= '<div class="admin-reviews-col0 admin-table-col '. $rowclass .'"><a href="/node/'. 
					$review->nid .'/edit">'. check_plain($review->title) ."</a></div>";
				$output .= '<div class="admin-reviews-col1 admin-table-col '. $rowclass .'"><a href="/profile/'. $review->uid .'">'. check_plain($review->screenname) .'</a></div>';
				$output .= "</div>";
			}
			else
			{
			    $output .= '<div class="admin-reviews-item admin-table-row">';
				$output .= '<div class="admin-badges-col0 admin-table-col '. $rowclass .'"><a href="/node/'. 
					$review->nid .'/edit">'. check_plain($review->title) ."</a></div>";
				$output .= '<div class="admin-badges-col2 admin-table-col '. $rowclass .'"><a href="/profile/'. $review->uid .'">'. check_plain($review->screenname) .'</a></div>';
				$output .= '<div class="admin-badges-col4 admin-table-col '. $rowclass .'"><a href="/review/reportremove/'. $review->rid .'">Review Okay</a></div>';
				$output .= "</div>";
			}
			
			$x++;
			
		} // end review loop
		
	}
	else {
		// no reviews
		// ?
	}
	
	//$output .= "</div><br /><br />";
	
	return $output;
}

/**
 * remove reported reivew
 */
function sr_review_report_remove($rid) {
	Review::removeReportReview($rid);
	drupal_goto("/administer/media/reportreviews"); 
}

/**
 * function to process jquery reviews list
 */
function sr_review_reviews($mid, $caller) {
  
	drupal_set_header('Content-Type: text/plain');
	
	if (!is_numeric($mid)) {
    echo "";
  }
  global $user;
  if (!$user->uid > 0) {
  	echo "";
  }  
	
  echo sr_review_makeReviewDiv($mid, $user->uid, $caller);
  
	exit(0);
	
}

/**
 * function to process jquery reviews list
 */
function sr_review_review($rid, $caller) {
  
	drupal_set_header('Content-Type: text/plain');
	
	if (!is_numeric($rid)) {
    echo "";
  	exit(0);
	}
  global $user;
  if (!$user->uid > 0) {
  	echo "";
  	exit(0);
  }
	
  echo sr_review_makeReviewItemDivInner(Review::loadReview($rid), $caller);
  
	exit(0);
	
}

/**
 * function to process jquery review body loading
 */
function sr_review_reviewbody($rid) {
  
	drupal_set_header('Content-Type: text/plain');
	
	if (!is_numeric($rid)) {
    echo "";
  	exit(0);
	}
  global $user;
  if (!$user->uid > 0) {
  	echo "";
  	exit(0);
  } 
   
	echo Review::loadReviewBody($rid);
  exit(0);
	
}

/**
 * function to process ajax call to save review like
 */
function sr_review_savelike($rid) {
	
	if (!is_numeric($rid)) {
    return false;
  }
  global $user;
  if (!$user->uid > 0) {
  	return false;
  }
  
	// process like action
	Badge::processAction(Badge::TYPE_LIKE, $user->uid);
	
	// process wasliked action
	$review = Review::loadReview($rid);
	Badge::processAction(Badge::TYPE_WASLIKED, $review->uid);
	
  return Review::saveLike($rid, $user->uid);  
}

/**
 * function to process ajax call to save review like
 */
function sr_review_report($rid) {
	
	if (!is_numeric($rid)) {
		return false;
	}
    global $user;
    if (!$user->uid > 0) {
		return false;
    }
	$ret=Review::reportReview($rid, $user->uid); 
	if($ret>0)
		$output=Review::emailReportedReview($rid, $user->uid, 'Reported Review'); 
    
	drupal_json(array('data' => $rid));
	exit();
}

/**
 * function to process email
 */
function sr_review_mail($key, &$message, $params) {
    switch($key) {
      case 'report_reivew':
	  
		  $headers = array(
			'MIME-Version' => '1.0',
			'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
			'Content-Transfer-Encoding' => '8Bit',
			'X-Mailer' => 'Drupal'
		  );
		  foreach ($headers as $key => $value) {
			$message['headers'][$key] = $value;
		  }
		   $message['subject'] = $params['subject'];
		   $message['body'] = $params['body'];
        break;
    }
}
 
/**
 * function to process ajax call to save review
 */
function sr_review_savereview($mid) {

	if (!is_numeric($mid) || !strlen(trim($_POST['review-text__' . $mid])) > 0) {
    return false;
  }
  
  global $user;
  if (!$user->uid > 0) {
  	return false;
  }
  
  // process review action
	Badge::processAction(Badge::TYPE_REVIEW, $user->uid);
  
  $body = check_markup(trim($_POST['review-text__' . $mid]), 1, false);

  $media = Media::loadMedia($mid);
  $review = new Review();
  $review->mid = $mid;
  $review->body = $body;
  $hasBadWords=0;
  if (sr_util_containsBadInput($body)) {
  	$review->status = 0;
	$hasBadWords=1;
  }
  else {
  	$review->status = 1;
	$hasBadWords=0;
  }
  $review->uid = $user->uid;
  $rid=$review->saveReview($media->title);
   //watchdog('actions', 'Stack overflow: '.$rid.$hasBadWords, array(), WATCHDOG_ERROR);
  if($rid>0 && $hasBadWords==1)
  {
     Review::emailReportedReview($rid, 0, 'Unpublish Review');
  }
  return true;
}

function sr_review_makeReviewDiv($mid, $uid, $caller) {
	// passed in $uid refers to profile being requested (not neceassily the logged in user)
	global $user;
	$userHasReviewed = false;
	
	$output = '<div class="media-reviews" id="media-reviews__'. $mid .'">' ;
		
	if ($caller == Review::REVIEW_CALLER_LOG) {
		// only load user profile page's reviews on this media
		$reviews = Review::loadMediaReviews($mid, $uid);
		
	} else {
		// load all reviews on this media
		$reviews = Review::loadMediaReviews($mid);
	}
	
	if ($reviews->count > 0) {
		
		// reviews exist
		
		$x = 0;
		
		while ($x < $reviews->count) {
			$review = $reviews->getObject($x);
			 //watchdog('actions', 'Stack overflow: '.$review->rid, array(), WATCHDOG_ERROR);
			if (!$review) {
				break;
			}

			if ($review->uid == $user->uid) {
				$loggedInUserHasReviewed = true;
			}
			
			if ($review->status == 0 && $review->uid != $uid) {
				// don't show other people's unpublished reviews
			}
			else {
				// only showing 1 review here, label dependent upon author
				if ($caller == Review::REVIEW_CALLER_LOG) {
					if ($user->uid == $uid) {
						$output .= '<div class="media-reviews-loglabel">'. t("Your Review:") ."</div>";
					}
					else {
						$output .= '<div class="media-reviews-loglabel">'. t("Their Review:") ."</div>";
					}
				}
				
				$output .= '<div class="media-reviews-item clear-block" id="media-reviews-item__'. $review->rid .'">' ;
				$output .= sr_review_makeReviewItemDivInner($review, $caller);
				$output .= "</div>";
			}
			
			$x++;
		} // end review loop
		
	}
	else {
		// no reviews
		// ?
	}

	if (!$loggedInUserHasReviewed) {
		if ($caller == Review::REVIEW_CALLER_LOG && $uid != $user->uid) {
			// don't let them add review here
		}
		else {
			$output .= '<div class="media-reviews-add" id="media-reviews-add__'. $mid .'">';
			// when changing div internal html, update also jquery reviews.js file
			$output .= '<a href="javascript:void();" class="add-review" id="add-review__'. $mid .'"><span style="display: none">Add a review!</span></a>' ;
			$output .= "</div>";
		}
	}
	
  $output .= "</div>";
	
	return $output;
}

function sr_review_makeReviewItemDivInner($review, $caller = Review::REVIEW_CALLER_PAGE) {
	global $user;
	
	if ($caller == Review::REVIEW_CALLER_PAGE) {
		// only show avatar link on media page
		$output .= '<a class="avatar-link" href="http://'. $_SERVER['HTTP_HOST'] . base_path() .'profile/'. urlencode($review->screenname) .'">' . 
			'<img class="avatar-small" src="'. sr_user_makeAvatarURL($review->uid, "S") .'" /></a>' ;
	}
	
	$output .= '<div class="media-reviews-item-right">' ;

	if ($caller == Review::REVIEW_CALLER_PAGE) {
		// only show avatar link on media page
		$output .= '<a class="screenname-link" href="http://'. $_SERVER['HTTP_HOST'] . base_path() .'profile/'. urlencode($review->screenname) .'">'. check_plain($review->screenname) ."</a>";
	}
	
	$output .= '<div class="review-content" id="review-content__'. $review->rid .'">' ;
	if ($review->status == 0 && $review->uid == $user->uid) {
		// viewing user's own unpublished review
		$output .= t("Your review needs to be approved by an administrator.");
	}
	else {
		$output .= $review->summary;
		if (strlen($review->body) > Review::SUMMARY_LEN || $review->summaryWasTrimmed) {
			$output .= ' <a href="javascript:void();" class="review-content-more" id="review-content-more__'. $review->rid .'">'. t("...see more") ."</a>";
		}
       	$output .= ' <br/><a href="javascript:void();" class="review-reportthis" id="report-review___'. $review->rid .'">'. t("Report this review") ."</a>";	
	}
	
	$output .= "</div>";
	
	// overall like count
	$count = count($review->likes);
	if ($count > 0) {
		$output .= '<div class="like-count">';
		if ($count == 1) {
			// only one review
			if ($review->uid != $user->uid && $review->isLiker($user->uid)) {
				// 1 review and it was you
				$output .= '<img class="like-thumb" src="'. Review::makeLikeImageURL() .'" alt="" />'. t("You liked this review");
			}
			else {
				$output .= '<img class="like-thumb" src="'. Review::makeLikeImageURL() .'" alt="" />'. t("1 person liked this review");
			}
					
		}
		else {
			// more than one review
			if ($review->uid != $user->uid && $review->isLiker($user->uid)) {
				// one of those was you
				$output .= '<img class="like-thumb" src="'. Review::makeLikeImageURL() .'" alt="" />'. $count .' '. t("people liked this review (including you)");
			}
			else {
				// none were by you
				$output .= '<img class="like-thumb" src="'. Review::makeLikeImageURL() .'" alt="" />'. $count .' '. t("people liked this review");
			}
		}
		$output .= "</div>";
	}

	// ask to like it
	if ($review->uid != $user->uid) {
		if (!$review->isLiker($user->uid)) {
			$output .= '<a href="javascript:void();" class="review-likethis" id="review-likethis__'. $review->rid .'">'. t("") ."</a>";
		}
	}
	
	$output .= "</div>";
	
	return $output;
}